# -*- coding: utf-8 -*-
"""KCB-Lagi.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10ZNXw52PhTAz11ybpQ-j5PPKL6YiY51e
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
from sklearn.preprocessing import OneHotEncoder, LabelEncoder
import seaborn as sns
import matplotlib.patches as mpatches

# URL dataset
url = "https://opendata.arcgis.com/datasets/e91ed1ee95314282aeab901e3d3ad890_38.csv"

# Memuat dataset langsung dari URL
df = pd.read_csv(url)

# Exploratory Data Analysis
print(df.head())
print(df.describe())

df.columns

# Preprocessing
# Convert 'DATE_' column to datetime
df['DATE_'] = pd.to_datetime(df['DATE_'], format='%Y/%m/%d %H:%M:%S%z')

# Extracting date components
df['year'] = df['DATE_'].dt.year
df['month'] = df['DATE_'].dt.month
df['day'] = df['DATE_'].dt.day
df['hour'] = df['DATE_'].dt.hour
df['minute'] = df['DATE_'].dt.minute
df['second'] = df['DATE_'].dt.second

# Drop original DATE_ column if necessary
df.drop(columns=['DATE_'], inplace=True)
df.dropna(inplace=True)

# Encoding categorical columns
categorical_columns = ['RACE', 'ETHNICITY', 'SEX', 'DESCRIPTION']  # Assuming 'CATEGORY' is the target
df = pd.get_dummies(df, columns=categorical_columns)

# Select features
features = ['year', 'month', 'day', 'hour', 'minute', 'second', 'AGE', 'OFFENSE_LATITUDE', 'OFFENSE_LONGITUDE'] + \
           [col for col in df.columns if col.startswith(tuple(categorical_columns))]

X = df[features]

# Replace 'CATEGORY' with the correct target variable if different
target_variable = 'CATEGORY'  # Replace with correct target column name if different

# Ensure the target variable exists in the dataframe
if target_variable not in df.columns:
    raise KeyError(f"Target variable '{target_variable}' not found in the dataset columns.")

y = df[target_variable]

# Convert categorical target to numerical if necessary
label_encoder = LabelEncoder()
y = label_encoder.fit_transform(y)

# Split data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train model
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Predict
y_pred = model.predict(X_test)

# Evaluate
print("Accuracy:", accuracy_score(y_test, y_pred))
print(confusion_matrix(y_test, y_pred))
print(classification_report(y_test, y_pred))

# Calculate feature importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]

# Visualize feature importances
plt.figure(figsize=(14, 10))
plt.title("Feature Importances", fontsize=18)
plt.bar(range(X.shape[1]), importances[indices], color="r", align="center")
plt.xticks(range(X.shape[1]), [features[i] for i in indices], rotation=90, fontsize=12)
plt.xlabel("Features")
plt.ylabel("Importance")
plt.savefig("feature_importances.jpg", format='jpg')
plt.show()

# Convert numerical labels back to categorical labels for visualization
y_pred_labels = label_encoder.inverse_transform(y_pred)
y_test_labels = label_encoder.inverse_transform(y_test)

# Combine predicted and actual data for visualization
data_pred = pd.DataFrame({'Predicted': y_pred_labels[:50], 'Actual': y_test_labels[:50], 'Age': X_test['AGE'][:50]})

# Residual Plot
# Calculate residuals
residuals = y_test - y_pred

# Plot residuals
plt.figure(figsize=(10, 6))
sns.histplot(residuals, kde=True)
plt.title('Residual Plot', fontsize=16)
plt.xlabel('Residuals', fontsize=14)
plt.ylabel('Frequency', fontsize=14)
plt.savefig("residual_plot.jpg", format='jpg')
plt.show()

# Visualisasi distribusi usia pelaku kejahatan
plt.figure(figsize=(10, 6))
sns.boxplot(x='CATEGORY', y='AGE', data=df)
plt.title("Distribusi Usia Pelaku Kejahatan")
plt.xlabel("Kategori Kejahatan")
plt.ylabel("Usia")
plt.xticks(rotation=90)
plt.savefig("distribusi_usia_pelaku_kejahatan.jpg", format='jpg')
plt.show()

# Convert numerical labels back to categorical labels for visualization
y_pred_labels = label_encoder.inverse_transform(y_pred)
y_test_labels = label_encoder.inverse_transform(y_test)

# Combine predicted and actual data for visualization
data_pred = pd.DataFrame({'Predicted': y_pred_labels[:50], 'Actual': y_test_labels[:50]})

# Plot barplot for comparison of predicted vs. actual categories
plt.figure(figsize=(10, 6))
sns.countplot(data=data_pred, x='Predicted', color='blue', alpha=0.7, label='Predicted')
sns.countplot(data=data_pred, x='Actual', color='red', alpha=0.7, label='Actual')
plt.title('Perbandingan Kategori Kejahatan yang Diprediksi vs. Aktual', fontsize=16)
plt.xlabel('Kategori Kejahatan', fontsize=14)
plt.ylabel('Jumlah', fontsize=14)
plt.legend()
plt.xticks(rotation=90)
plt.savefig('Perbandingan Kategori Kejahatan yang Diprediksi vs. Aktual.jpg', format='jpg')
plt.show()

y_pred_labels = label_encoder.inverse_transform(y_pred)
y_test_labels = label_encoder.inverse_transform(y_test)

# Gabungkan data prediksi dan aktual untuk digunakan dalam visualisasi
data_pred = pd.DataFrame({'Prediction': y_pred_labels, 'Actual': y_test_labels, 'Age': X_test['AGE']})

# Plot box plot untuk perbandingan prediksi vs. aktual
plt.figure(figsize=(10, 6))
sns.boxplot(x='Prediction', y='Age', data=data_pred, color='blue')
sns.boxplot(x='Actual', y='Age', data=data_pred, color='red')
plt.title('Perbandingan Kategori Kejahatan yang Diprediksi vs. Aktual Berdasarkan Usia', fontsize=16)
plt.xlabel('Kategori Kejahatan', fontsize=14)
plt.ylabel('Umur', fontsize=14)
plt.xticks(rotation=90)
blue_patch = mpatches.Patch(color='blue', label='Prediksi')
red_patch = mpatches.Patch(color='red', label='Aktual')
plt.legend(handles=[blue_patch, red_patch], loc='upper left')
plt.savefig('Perbandingan Kategori Kejahatan yang Diprediksi vs. Aktual Berdasarkan Usia.jpg', format='jpg')
plt.show()